package fermyon:spin-wasi-virt;

world virt {
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;
    export wasi:clocks/monotonic-clock@0.2.3;
    export wasi:clocks/wall-clock@0.2.3;

    import wasi:random/random@0.2.3;
    import wasi:random/insecure@0.2.3;
    import wasi:random/insecure-seed@0.2.3;
    export wasi:random/random@0.2.3;
    export wasi:random/insecure@0.2.3;
    export wasi:random/insecure-seed@0.2.3;
    
    import wasi:io/poll@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:io/error@0.2.3;
    export wasi:io/poll@0.2.3;
    export wasi:io/streams@0.2.3;
    export wasi:io/error@0.2.3;

    export wasi:filesystem/types@0.2.3;
    export wasi:filesystem/preopens@0.2.3;

    export wasi:cli/stdout@0.2.3;
    export wasi:cli/stdin@0.2.3;
    export wasi:cli/stderr@0.2.3;
    export wasi:cli/terminal-input@0.2.3;
    export wasi:cli/terminal-output@0.2.3;
    export wasi:cli/terminal-stdin@0.2.3;
    export wasi:cli/terminal-stdout@0.2.3;
    export wasi:cli/terminal-stderr@0.2.3;
    export wasi:cli/environment@0.2.3;
    export wasi:cli/exit@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stdin@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:cli/terminal-input@0.2.3;
    import wasi:cli/terminal-output@0.2.3;
    import wasi:cli/terminal-stdin@0.2.3;
    import wasi:cli/terminal-stdout@0.2.3;
    import wasi:cli/terminal-stderr@0.2.3;
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;

    export wasi:sockets/instance-network@0.2.3;
    export wasi:sockets/network@0.2.3;
    export wasi:sockets/udp@0.2.3;
    export wasi:sockets/udp-create-socket@0.2.3;
    export wasi:sockets/tcp@0.2.3;
    export wasi:sockets/tcp-create-socket@0.2.3;
    export wasi:sockets/ip-name-lookup@0.2.3;
    
    export wasi:http/outgoing-handler@0.2.3;
    export wasi:http/types@0.2.3;
    import wasi:http/types@0.2.3;

    export http-handler;
    export http-helper;
    export fs-handler;
}

/// Helpers for overcoming the limitations of `wasi:http@0.2.3`
interface http-helper {
    use wasi:http/types@0.2.3.{
        incoming-request, incoming-response, outgoing-response,
        outgoing-request, response-outparam, future-incoming-response,
        incoming-body
    };
    /// A receiver of an `incoming-response`
    resource response-receiver {
        get: func() -> option<incoming-response>;
    }
    /// Create an `incoming-request` from an `outgoing-request`
    ///
    /// An optional `incoming-body` can also be supplied which will be
    /// used instead of the body of the `outgoing-request`.
    new-request: func(request: outgoing-request, incoming-body: option<incoming-body>) -> incoming-request;
    /// Get a pair of a `response-outparam` and a `response-receiver`
    new-response: func() -> tuple<response-outparam, response-receiver>;
}

/// Interface for configuring the behavior of `wasi:http/outgoing-handler` interface
interface http-handler {
    use wasi:http/types@0.2.3.{outgoing-response};

    variant response-handler {
        echo,
        response(outgoing-response)
    }

    /// Set a response for a given url
    set-response: func(url: string, response: response-handler);
}

interface fs-handler {
    add-file: func(path: string, contents: list<u8>);
}